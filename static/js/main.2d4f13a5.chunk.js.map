{"version":3,"sources":["components/PostsList/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","types/InputNames.ts","components/NewCommentForm/NewCommentForm.tsx","utils/helpers.ts","components/PostDetails/PostDetails.tsx","components/UserSelector/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPost","selectPost","className","map","post","id","title","type","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","InputNames","client","NewCommentForm","handleAddComment","setHasLoadingError","postId","useState","name","email","commentData","setCommentData","hasInputError","setHasInputError","isCommentLoading","setIsCommentLoading","handleTextInput","value","length","prevInputErrors","prevCommentData","addComment","a","newComment","onSubmit","event","preventDefault","possibleErrors","Object","keys","forEach","key","validateCommentData","haveInputsErrors","values","includes","checkInputsHaveErrors","htmlFor","Name","placeholder","classNames","onChange","target","Email","Body","PostDetails","comments","setComments","areCommentsLoading","setAreCommentsLoading","hasLoadingError","isCommentFormOpen","setIsCommentFormOpen","loadComments","loadedComments","deleteComment","commentId","filter","comment","console","warn","useCallback","prevComments","useEffect","href","UserSelector","users","selectedUser","selectUser","isDropdownMenuOpen","setIsDropdownMenuOpen","onFocus","onBlur","onMouseDown","role","tabIndex","user","handleUserSelection","App","setUsers","setSelectedUser","userPosts","setUserPosts","setSelectedPost","arePostsLoading","setArePostsLoading","hasPostsLoadingError","setHasPostsLoadingError","loadUsers","loadedUsers","loadUserPosts","userId","loadedPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2d4f13a5.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost:Post | null;\n  selectPost: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts, selectedPost, selectPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr data-cy=\"Post\" key={post.id}>\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              {selectedPost === post ? (\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className=\"button is-link\"\n                  onClick={() => {\n                    selectPost(null);\n                  }}\n                >\n                  Close\n                </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className=\"button is-link is-light\"\n                  onClick={() => {\n                    selectPost(post);\n                  }}\n                >\n                  Open\n                </button>\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum InputNames {\n  Name = 'name',\n  Email = 'email',\n  Body = 'body',\n}\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Comment, CommentData, CommentDataErrors } from '../../types/Comment';\nimport {\n  checkInputsHaveErrors, validateCommentData,\n} from '../../utils/helpers';\nimport { client } from '../../utils/fetchClient';\nimport { InputNames } from '../../types/InputNames';\n\ntype Props = {\n  handleAddComment: (comment: Comment) => void;\n  setHasLoadingError: (value: boolean) => void;\n  postId: number;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  handleAddComment,\n  setHasLoadingError,\n  postId,\n}) => {\n  const [commentData, setCommentData] = useState<CommentData>({\n    name: '',\n    email: '',\n    body: '',\n  });\n  const [hasInputError, setHasInputError] = useState<CommentDataErrors>({\n    name: false,\n    email: false,\n    body: false,\n  });\n  const [isCommentLoading, setIsCommentLoading] = useState(false);\n\n  const handleTextInput = (value: string, name: InputNames) => {\n    if (!commentData[name].length && value === ' ') {\n      return;\n    }\n\n    if (hasInputError[name]) {\n      setHasInputError(prevInputErrors => ({\n        ...prevInputErrors,\n        [name]: false,\n      }));\n    }\n\n    setCommentData(prevCommentData => ({\n      ...prevCommentData,\n      [name]: value,\n    }));\n  };\n\n  const handleResetForm = () => {\n    setCommentData({ name: '', email: '', body: '' });\n    setHasInputError({ name: false, email: false, body: false });\n  };\n\n  const resetBody = () => {\n    setCommentData(prevCommentData => ({\n      ...prevCommentData,\n      body: '',\n    }));\n  };\n\n  const addComment = async () => {\n    try {\n      setIsCommentLoading(true);\n      const data = { ...commentData, postId };\n      const newComment: Comment = await client.post('/comments', data);\n\n      handleAddComment(newComment);\n      resetBody();\n    } catch {\n      setHasLoadingError(true);\n    } finally {\n      setIsCommentLoading(false);\n    }\n  };\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const possibleErrors = validateCommentData(commentData);\n    const haveInputsErrors = checkInputsHaveErrors(possibleErrors);\n\n    if (haveInputsErrors) {\n      setHasInputError(possibleErrors);\n\n      return;\n    }\n\n    addComment();\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleFormSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name={InputNames.Name}\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': hasInputError.name },\n            )}\n            value={commentData.name}\n            onChange={({ target }) => {\n              handleTextInput(target.value, InputNames.Name);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasInputError.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasInputError.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name={InputNames.Email}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': hasInputError.email },\n            )}\n            value={commentData.email}\n            onChange={({ target }) => {\n              handleTextInput(target.value, InputNames.Email);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {hasInputError.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasInputError.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name={InputNames.Body}\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': hasInputError.body },\n            )}\n            value={commentData.body}\n            onChange={({ target }) => {\n              handleTextInput(target.value, InputNames.Body);\n            }}\n          />\n        </div>\n\n        {hasInputError.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isCommentLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleResetForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { CommentData, CommentDataErrors } from '../types/Comment';\n\nexport const validateCommentData = (commentData: CommentData) => {\n  const hasInputError: CommentDataErrors = {\n    name: false,\n    email: false,\n    body: false,\n  };\n\n  Object.keys(commentData).forEach(key => {\n    if (key === 'name' || key === 'email' || key === 'body') {\n      if (!commentData[key].length) {\n        hasInputError[key] = true;\n      }\n    }\n  });\n\n  return hasInputError;\n};\n\nexport const checkInputsHaveErrors = (possibleErrors: CommentDataErrors) => {\n  return Object.values(possibleErrors).includes(true);\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Post } from '../../types/Post';\nimport { client } from '../../utils/fetchClient';\nimport { Comment } from '../../types/Comment';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [areCommentsLoading, setAreCommentsLoading] = useState(false);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n  const [isCommentFormOpen, setIsCommentFormOpen] = useState(false);\n\n  const loadComments = async (postId: number) => {\n    try {\n      setComments(null);\n      setAreCommentsLoading(true);\n\n      const loadedComments: Comment[] = await client.get(\n        `/comments?postId=${postId}`,\n      );\n\n      setComments(loadedComments);\n    } catch {\n      setHasLoadingError(true);\n    } finally {\n      setAreCommentsLoading(false);\n    }\n  };\n\n  const deleteComment = async (commentId: number) => {\n    try {\n      if (comments) {\n        setComments(comments.filter(comment => comment.id !== commentId));\n      }\n\n      await client.delete(`/comments/${commentId}`);\n    } catch {\n      // eslint-disable-next-line no-console\n      console.warn('Comment was not deleted from server');\n    }\n  };\n\n  const handleAddComment = useCallback((comment: Comment) => {\n    setComments(prevComments => {\n      if (prevComments) {\n        return [...prevComments, comment];\n      }\n\n      return [comment];\n    });\n  }, [comments]);\n\n  useEffect(() => {\n    setIsCommentFormOpen(false);\n    setHasLoadingError(false);\n    loadComments(post.id);\n  }, [post]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {areCommentsLoading && <Loader />}\n\n          {hasLoadingError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {(comments && !areCommentsLoading && !hasLoadingError) && (\n            comments?.length ? (\n              <>\n                <p className=\"title is-4\">Comments:</p>\n\n                {comments.map(comment => (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={comment.id}\n                  >\n                    <div className=\"message-header\">\n                      <a\n                        href={`mailto:${comment.email}`}\n                        data-cy=\"CommentAuthor\"\n                      >\n                        {comment.name}\n                      </a>\n\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => {\n                          deleteComment(comment.id);\n                        }}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div\n                      className=\"message-body\"\n                      data-cy=\"CommentBody\"\n                    >\n                      {comment.body}\n                    </div>\n                  </article>\n                ))}\n              </>\n            ) : (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )\n          )}\n\n          {(!hasLoadingError && !areCommentsLoading) && (\n            isCommentFormOpen ? (\n              <NewCommentForm\n                handleAddComment={handleAddComment}\n                setHasLoadingError={setHasLoadingError}\n                postId={post.id}\n              />\n            ) : (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={() => {\n                  setIsCommentFormOpen(true);\n                }}\n              >\n                Write a comment\n              </button>\n            )\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUser: User | null;\n  selectUser: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users, selectedUser, selectUser,\n}) => {\n  const [isDropdownMenuOpen, setIsDropdownMenuOpen] = useState(false);\n\n  const handleUserSelection = (\n    event: React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n    user: User,\n  ) => {\n    event.preventDefault();\n\n    selectUser(user);\n    setIsDropdownMenuOpen(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': isDropdownMenuOpen })}\n      onFocus={() => setIsDropdownMenuOpen(true)}\n      onBlur={() => setIsDropdownMenuOpen(false)}\n      onMouseDown={() => setIsDropdownMenuOpen(!isDropdownMenuOpen)}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n        >\n          <span>\n            {selectedUser ? selectedUser.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': user.id === selectedUser?.id },\n              )}\n              key={user.id}\n              onMouseDown={(event) => {\n                handleUserSelection(event, user);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { client } from './utils/fetchClient';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [userPosts, setUserPosts] = useState<Post[] | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [arePostsLoading, setArePostsLoading] = useState(false);\n  const [hasPostsLoadingError, setHasPostsLoadingError] = useState(false);\n\n  const loadUsers = async () => {\n    try {\n      const loadedUsers: User[] = await client.get('/users');\n\n      setUsers(loadedUsers);\n    } catch {\n      // eslint-disable-next-line no-console\n      console.warn('Could not load users from server');\n    }\n  };\n\n  const loadUserPosts = async (userId: number) => {\n    try {\n      setArePostsLoading(true);\n      setHasPostsLoadingError(false);\n\n      const loadedPosts: Post[] = await client.get(`/posts?userId=${userId}`);\n\n      setUserPosts(loadedPosts);\n    } catch {\n      setHasPostsLoadingError(true);\n    } finally {\n      setArePostsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setUserPosts(null);\n      setSelectedPost(null);\n      loadUserPosts(selectedUser.id);\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  selectUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {arePostsLoading && <Loader />}\n\n                {hasPostsLoadingError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {userPosts && (\n                  userPosts.length ? (\n                    <PostsList\n                      posts={userPosts}\n                      selectedPost={selectedPost}\n                      selectPost={setSelectedPost}\n                    />\n                  ) : (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  )\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && <PostDetails post={selectedPost} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}